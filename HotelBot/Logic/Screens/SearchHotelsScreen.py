from Bot.VkBotSession import VkBotSession
from Logic.Hotels.HotelPriceClient import HotelPriceClient
from Database.Repositories.UserSearchRequestRepository import UserSearchRequestRepository
from Cache import getCache;
from Logic.Variables import Variables;
from Bot.Screen import Screen;
from Logic.Command import Command
from Bot.Payload import Payload
from Bot.KeyBoardButton import KeyBoardButton
from Infrastructure.UserVariables import UserVariables;
from Bot.VkBotKeyboard import VkBotKeyboard;
from Bot.BotEvent import BotEvent;
import re;

import datetime;

def searchHotels(session: VkBotSession, keyBoard: VkBotKeyboard, event: BotEvent):
    userVars = UserVariables(event.userId);
    
    client = HotelPriceClient();
    fromDate = userVars.getVariable(Variables.HotelFromDate);
    toDate = userVars.getVariable(Variables.HotelToDate);
    city = userVars.getVariable(Variables.HotelCity);
    guests = userVars.getVariable(Variables.HotelGuests);
    rooms = userVars.getVariable(Variables.HotelRooms);
    priceRange = userVars.getVariable(Variables.PriceRange);
    found = client.getHotels(fromDate, toDate, city, guests, rooms);

    isSearch = event.payload.dict['isSearch'];
    if not isSearch:
       UserSearchRequestRepository.create(city, guests, rooms, fromDate, toDate, priceRange, event.userId);

    error = found.get('error');
    hotels = found.get('hotels')[:8];
    
    cheapest = sorted(hotels, key=lambda x: x.price, reverse=False);

    if priceRange is not None:
        prices = priceRange.split();
        priceFrom = int(prices[0]);
        priceTo = int(prices[1]);
        cheapest = [item for item in cheapest if item.price >= priceFrom and item.price <= priceTo];

    userVars.clear();
    text = '';
    if len(error) > 0:
       text = error;
    else:
       if len(cheapest) == 0:
           text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:( –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å';
       else:
           text = '–°–ø–∏—Å–æ–∫ –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∏–∂–µ';
           idx = 0;
           getCache().set(event.userId, cheapest);
           for hotel in cheapest:
               textBtn = 'üíµ ' + str(hotel.price) + ' ' + str(hotel.name);
               dict = {};
               dict['idx'] = idx;
               keyBoard.addButton(KeyBoardButton(textBtn, Payload(Command.HotelInfo, dict)));
               keyBoard.addNewLine();
               idx+=1;

    keyBoard.addButton(KeyBoardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', Payload(Command.BackMenu)));
    screen = Screen( text, session, keyBoard);
    return screen;

def showHotelInfo(session: VkBotSession, keyBoard: VkBotKeyboard, event: BotEvent):
    keyBoard.addButton(KeyBoardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', Payload(Command.BackMenu)));
    hotels = getCache().get(event.userId);
    idx = event.payload.dict['idx'];
    hotel = hotels[idx];
    data = hotel.getText();
    screen = Screen( data, session, keyBoard);
    return screen;

def searchHotelsFromDate(session: VkBotSession, keyBoard: VkBotKeyboard, event: BotEvent):
    userVars = UserVariables(event.userId);
    matches = re.findall('\d{4}\-\d{2}\-\d{2}', event.message);
    screenText = '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2019-07-01)';
    foundCommand = userVars.getCommand();

    if foundCommand is not None and len(foundCommand) > 0:
        if len(matches) == 0:
            screenText = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ';
        else:
            isCorrectDate = True;
            date = None;
            try:
                date = datetime.datetime.strptime(event.message, '%Y-%m-%d');
            except Exception as e:
                isCorrectDate = False;
            now = datetime.datetime.now();

            if isCorrectDate:
               isCorrectDate = (date.year >= now.year and date.month >= now.month and date.day > now.day) or ( date.year >= now.year and date.month > now.month);

            if isCorrectDate:
                userVars.addVariable(Variables.HotelFromDate, event.message);
                userVars.addCommand('');
                userVars.save();
                return searchHotelsToDate(session, keyBoard, event);
            else:
               screenText = '–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Å–µ–≥–æ–¥–Ω—è –Ω–∞–ø—Ä–∏–º–µ—Ä (2019-07-01)!';
    else:
        userVars.addCommand(Command.SearchHotelsFromDate);
        userVars.save();
    keyBoard.addButton(KeyBoardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', Payload(Command.BackMenu)));
    return Screen( screenText, session, keyBoard);

def searchHotelsToDate(session: VkBotSession, keyBoard: VkBotKeyboard, event: BotEvent):
    userVars = UserVariables(event.userId);
    matches = re.findall('\d{4}\-\d{2}\-\d{2}', event.message);
    screenText = '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2019-07-05)';
    foundCommand = userVars.getCommand();

    if foundCommand is not None and len(foundCommand) > 0:
        if len(matches) == 0:
            screenText = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ';
        else:

            fromDate = datetime.datetime.strptime(userVars.getVariable(Variables.HotelFromDate), '%Y-%m-%d');
            now = datetime.datetime.now();
            isCorrectDate = True;
            date = None;
            try:
                date = datetime.datetime.strptime(event.message, '%Y-%m-%d');
            except Exception as e:
                isCorrectDate = False;

            if isCorrectDate:
               isCorrectDate = (date.year >= now.year and date.month >= now.month and date.day > now.day) or ( date.year >= now.year and date.month > now.month);

            if isCorrectDate:
                if date > fromDate:
                    userVars.addVariable(Variables.HotelToDate, event.message);
                    userVars.addCommand('');
                    userVars.save();
                    return searchHotelsFromCity(session, keyBoard, event);
                else:
                    screenText = '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞!';
            else:
                 screenText = '–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Å–µ–≥–æ–¥–Ω—è –Ω–∞–ø—Ä–∏–º–µ—Ä (2019-07-05)!';
    else:
        userVars.addCommand(Command.SearchHotelsToDate);
        userVars.save();
    keyBoard.addButton(KeyBoardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', Payload(Command.BackMenu)));
    return Screen( screenText, session, keyBoard);

def searchHotelsFromCity(session: VkBotSession, keyBoard: VkBotKeyboard, event: BotEvent):
    userVars = UserVariables(event.userId);
    screenText = '–ö—É–¥–∞ –≤—ã –ø–æ–µ–¥–µ—Ç–µ?';
    foundCommand = userVars.getCommand();
    matches = re.findall('^[a-zA-Z–∞-—è–ê-–Ø]*$', event.message);

    if foundCommand is not None and len(foundCommand) > 0:
         if len(matches) == 0 or len(event.message) < 1:
            screenText = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞';
         else:
            userVars.addVariable(Variables.HotelCity, event.message);
            userVars.addCommand('');
            userVars.save();
            return searchHotelsGuests(session, keyBoard, event);
    else:
        userVars.addCommand(Command.SearcHotelsCity);
        userVars.save();
    keyBoard.addButton(KeyBoardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', Payload(Command.BackMenu)));
    return Screen( screenText, session, keyBoard);

def searchHotelsGuests(session: VkBotSession, keyBoard: VkBotKeyboard, event: BotEvent):
    userVars = UserVariables(event.userId);
    screenText = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ (–æ—Ç 1 –¥–æ 10)?';
    foundCommand = userVars.getCommand();

    if foundCommand is not None and len(foundCommand) > 0:
        if event.message not in ['1','2','3','4','5','6','7','8','9','10']:
           screenText = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10';
        else:
            userVars.addVariable(Variables.HotelGuests, event.message);
            userVars.addCommand('');
            userVars.save();
            return searchHotelsRooms(session, keyBoard, event);
    else:
        userVars.addCommand(Command.SearchHotelsGuests);
        userVars.save();
    keyBoard.addButton(KeyBoardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', Payload(Command.BackMenu)));
    return Screen( screenText, session, keyBoard);

def searchHotelsRooms(session: VkBotSession, keyBoard: VkBotKeyboard, event: BotEvent):
    userVars = UserVariables(event.userId);
    screenText = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (–æ—Ç 1 –¥–æ 5)?';
    foundCommand = userVars.getCommand();

    if foundCommand is not None and len(foundCommand) > 0:
        if event.message not in ['1', '2','3','4','5']:
           screenText = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5';
        else:
            userVars.addVariable(Variables.HotelRooms, event.message);
            userVars.addCommand('');
            userVars.save();
            return searchHotelsPriceRange(session, keyBoard, event);
    else:
        userVars.addCommand(Command.SearchHotelsRooms);
        userVars.save();
    keyBoard.addButton(KeyBoardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', Payload(Command.BackMenu)));
    return Screen( screenText, session, keyBoard);

def searchHotelsPriceRange(session: VkBotSession, keyBoard: VkBotKeyboard, event: BotEvent):
    userVars = UserVariables(event.userId);
    matches = re.findall('(\d+)\s(\d+)', event.message);
    screenText = '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (10000 20000 —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)';
    foundCommand = userVars.getCommand();

    if foundCommand is not None and len(foundCommand) > 0:
        if len(matches) == 0:
            screenText = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: 10000 20000';
        else:
            userVars.addVariable(Variables.PriceRange, event.message);
            userVars.addCommand('');
            userVars.save();
            dict ={};
            dict['isSearch'] = False;
            event.payload = Payload('', dict);
            return searchHotels(session, keyBoard, event);
    else:
        userVars.addCommand(Command.PriceRange);
        userVars.save();
    keyBoard.addButton(KeyBoardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', Payload(Command.BackMenu)));
    return Screen( screenText, session, keyBoard);
